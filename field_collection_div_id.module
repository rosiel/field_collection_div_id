<?php

/**
 * Alters how field collection items are displayed
 * so that when rendered, they have a div id
 * based on their field_collection_item id,
 * and in the edit form of the host node, the div id is visible 
 * so that an admin may, for instance, link to this id as an anchor
 * within a text area.  
 *
 * Note that field collections don't play nicely with workbench moderate unless you use this:
 * https://drupal.org/files/field_collection_with_workbench_moderation-1807460-42.patch
 * or a later patch from this thread:
 * https://drupal.org/node/1807460#comment-7403212
 *
 * You may also want to enable the Save and Continue button 
 * via the mb (More Buttons) module to make it easier to 
 * link to recently added field collections. 
 * */

// Create a variable to store the path to this module
define('FCDI_PATH', drupal_get_path('module', 'field_collection_div_id'));

/**
 * Implements hook_theme().
 */
function field_collection_div_id_theme() {
  return array(
    'field_collection_item_div_id' => array(
      'render element' => 'elements',
      'template' => 'field-collection-item-div-id',
    ),
  );
}

/* 
 * Implements hook_preprocess_HOOK()
 * in particular, hook_preprocess_entity
 * because the field collection items are rendered using theme 'entity'
 * and suggestions 'field_collection_item[__etc]'
 * and suggestions can't be preprocessed. Thus we add our template as a suggestion.
 */
function field_collection_div_id_preprocess_entity(&$variables) {
    if ($variables['elements']['#entity_type'] == 'field_collection_item') {
      $more_suggestions = array();
      foreach ($variables['theme_hook_suggestions'] as $suggestion) {
          if (strpos($suggestion, 'field_collection_item') === 0 ) {
            $more_suggestions[] = str_replace('field_collection_item', 'field_collection_item_div_id', $suggestion);
          }
      }
      $variables['theme_hook_suggestions'] = array_merge($variables['theme_hook_suggestions'], $more_suggestions);
    }
}

/**
 * Implements hook_field_collection_item_view().
 */
function field_collection_div_id_field_collection_item_view($field_collection_item, $view_mode, $langcode) {
	// Get the div_id and insert it as ['html_id'] which is used in the field-collection-div-id template.
	$div_id = field_collection_div_id_create_div_id($field_collection_item);
	$field_collection_item->content['html_id'] = array(
		'#markup' => $div_id,
	);
}


/**
 * Returns a div id based on the field name and the field collection item id,
 * or Null if the field_collection item id doesn't exist.
 */
function field_collection_div_id_create_div_id($field_collection_item) {
	if (!isset($field_collection_item->item_id) || $field_collection_item->item_id === Null) {
	  return Null;
	}
    $div_id = $field_collection_item->field_name . '-' . $field_collection_item->item_id;
    // remove 'field_' from the name of the field, because #person-3 is nicer than #field-person-3.
	if (strpos($div_id, 'field_') === 0) {
	  $div_id = substr($div_id, 6);
	}
	return $div_id;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function field_collection_div_id_field_widget_field_collection_embed_form_alter(&$element, &$form_state, $context) {
	// Get the div_id for this entity
	// and output it as text in the edit widget.
	$div_id = field_collection_div_id_create_div_id($element['#entity']);
    if ($div_id) {
        $text = '#' . $div_id;
    }
    else {
        $text = t('Save this form to generate an id for this element');
    }
	$element['html_id'] = array(
        '#markup' => $text,
        '#prefix' => '<div class="field-collection-div-id">',
        '#suffix' => '</div>',
    );
    // Add the after_build function to load our css.
    $element['#after_build'][] = 'field_collection_div_id_add_css';

	
}

/**
 * Adds custom CSS to the div id as it appears in the edit widget.
 * Namely, floats it to the right so it's out of the way.
 */
function field_collection_div_id_add_css($element, &$form_state) {
    drupal_add_css(FCDI_PATH . '/css/div_id.css');
    return $element;
}
/**
 * Implements hook_wysiwyg_plugin().
 */
function field_collection_div_id_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
   case 'ckeditor':
    return array(
     'anchorLink' => array(
      'path' => FCDI_PATH . '/anchorLink',
      'buttons' => array(
       'anchorLink' => t('Anchor Link'),
      ),
      'load' => TRUE,
     ),
    );
    break;
  }
}


